name: Build Debian Package

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.5

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper-compat=13 python3-all python3-setuptools dh-python

      # We need to find the current active server in order to retrieve the state file from it
      - name: Get current server ID
        id: get_server_id
        env: 
          SERVER_NAME: "discord-guild-updates"
        run: |
          HETZNER_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_TOKEN }}" "https://api.hetzner.cloud/v1/servers")
          SERVER_ID=$(echo "$HETZNER_RESPONSE" | jq -r ".servers[] | select(.name == \"$SERVER_NAME\") | .id")
          echo "server_id=$SERVER_ID" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: get current server IP
        id: get_server_ip
        run: |
          SERVER_ID=${{ steps.get_server_id.outputs.server_id }}
          HETZNER_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_TOKEN }}" "https://api.hetzner.cloud/v1/servers/${{ steps.get_server_id.outputs.server_id }}")
          SERVER_IP=$(echo "$HETZNER_RESPONSE" | jq -r '.server.public_net.ipv4.ip')
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Set up secrets
        env:
          GUILDURI: ${{ secrets.GUILDURI }}
        run: |
          sed -i "s|'CLIENT_ID'|'${{ secrets.CLIENT_ID }}'|" ./discord_guild_updates_bot/vars.py
          sed -i "s|'CLIENT_SECRET'|'${{ secrets.CLIENT_SECRET }}'|" ./discord_guild_updates_bot/vars.py
          sed -i "s|'REPLACE_GUILDURI'|'$GUILDURI'|" ./discord_guild_updates_bot/vars.py
          sed -i "s|'TOKEN'|'${{ secrets.TOKEN }}'|" ./discord_guild_updates_bot/vars.py

      - name: Build .deb package
        run: dpkg-buildpackage -us -uc

      - name: Create artifacts
        run: |
          cd ..
          find .. -maxdepth 1 -type f -name '*.deb' -exec mv {} $GITHUB_WORKSPACE \;
        working-directory: debian

      # Upload the debian package to the Github artifacts
      - name: Upload .deb package
        uses: actions/upload-artifact@v2
        with:
          name: deb-package
          path: ${{ github.workspace }}/*.deb

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.2
          terraform_wrapper: false
      
      # Here we are checking if the state file can be retrived from the server. If the server doesn't exist, then use a new state file
      - name: Use terraform state
        id: use_remote_state
        env: 
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          if scp -i deploy_key -o StrictHostKeyChecking=no root@${{ steps.get_server_ip.outputs.server_ip }}:/etc/terraform/terraform.tfstate terraform.tfstate; then
            echo "Using retrieved state file"
            terraform init -backend=false
            terraform init -reconfigure -backend-config="path=terraform.tfstate"
          else
            echo "Using local state file. remote not found"
            terraform init -upgrade
          fi
    
      # Here we want to remove the old server so that the new one can be built. However we need to allow this to continue if it fails because the server may not exist.
      - name: Terraform Destory
        run: terraform destroy -target=hcloud_server.discord-guild-updates -var="hcloud_token=${{ secrets.HETZNER_TOKEN }}" -auto-approve
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -var="hcloud_token=${{ secrets.HETZNER_TOKEN }}" -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get New Server IP
        id: server_ip
        run: |
          echo "server_ip=$(terraform output -json server_ip)" >> $GITHUB_OUTPUT

      - name: Wait for Server to boot
        run: |
          sleep 30

      # Here we upload the new state file so that the next time this workflow runs, it will grab this state file and use it
      - name: Upload State File
        env: 
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no root@${{ steps.server_ip.outputs.server_ip }} "mkdir -p /etc/terraform"
          scp -i deploy_key -o StrictHostKeyChecking=no terraform.tfstate root@${{ steps.server_ip.outputs.server_ip }}:/etc/terraform/terraform.tfstate
        shell: bash

      # Here we need to install the debian package. As this is a Python project, there are some dependencies we need to fix first
      - name: Deploy deb package
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no root@${{ steps.server_ip.outputs.server_ip }} "apt-get update && apt-get install -y python3-pip; sudo apt install -y libcairo2-dev pkg-config python3-dev"
          scp -i deploy_key -o StrictHostKeyChecking=no ${{ github.workspace }}/*.deb root@${{ steps.server_ip.outputs.server_ip }}:/etc
          ssh -i deploy_key -o StrictHostKeyChecking=no root@${{ steps.server_ip.outputs.server_ip }} "dpkg -i /etc/*.deb; pip install --upgrade pip; pip install -r /usr/lib/python3/dist-packages/discord_guild_updates_bot/requirements.txt"
        shell: bash

      - name: Start bot
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no root@${{ steps.server_ip.outputs.server_ip }} "nohup python3 /usr/lib/python3/dist-packages/discord_guild_updates_bot/main.py > bot.log 2>&1 &"
        shell: bash
